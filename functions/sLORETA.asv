function solution = sLORETA( meta, result )
  % common parameters
  meta.M = size(meta.Leadfield, 1);
  meta.N = size(meta.Leadfield, 2);
  meta.T = size(result.data.time, 2);

  H = eye(meta.N) - ones(meta.N)/meta.N;

  % hyperparameter tuning via Generalized Cross-Validation
  parTic  = tic;
  params  = RegionPrior_optimize(meta, result);
  parTime = toc(parTic);
  % solution per se
  algTic   = tic;
  solution = RegionPrior_solve(   meta, result, params);
  algTime  = toc(algTic);
  %
  solution.parTime = parTime;
  solution.algTime = algTime;
  %solution.svdTime = svdTime;
  solution.params = params;
end

function solution = RegionPrior_solve( meta, result, params )
  kernel = RegionPrior_kernel( meta, params );

  solution.J = kernel* result.data.Y;
end

function params =  RegionPrior_optimize( meta, result)
  params = [];
  par = [];

  gammas0 = (median(meta.S)^2) * ( 10.^(-3:3) );
  gammas1 = (median(meta.S)^2) * ( 10.^(-3:3) );
  sigmas  = (median(meta.S)^2) * ( 10.^(-3:3) );
  Gs      = zeros( size(gammas0,2), size(gammas1,2), size(sigmas,2) );

  found = false; iter = 0; 
  %big = [1,1,1];
  while ~found && (iter<3)
    for q0 = 1:length(gammas0)
    for q1 = 1:length(gammas1)
    for ss = 1:length(sigmas)
      par.gamma0 = gammas0(q0);
      par.gamma1 = gammas1(q1);
      par.sigma  = sigmas(ss);
      Gs(q0,q1,ss)  = RegionPrior_GCV( meta, result, par );
    end
    end
    end
    %[~, idx] = min(Gs);
    %if (1 < idx(1)) && (idx(1) < 11)
    %  big    = big/10;
    %  iter   = iter + 1/3;
    %end
    %gammas0 = (gammas0(idx)) * ( 10.^((-big):(big/10):big) );
    found=true;
  end
  [~, IDX] = min(Gs,[],"all");
  [idx1, idx2, idx3] = ind2sub( size(Gs) ,IDX);

  params.gamma0 = gammas0(idx1);
  params.gamma1 = gammas1(idx2);
  params.sigma  =  sigmas(idx3);
end

function G = RegionPrior_GCV( meta, result, par)
  Kv = RegionPrior_kernel( meta, par );
  G  = meta.M*norm( (meta.Leadfield*Kv-eye(meta.M)) *result.data.Y,"fro")^2 ...
    / trace(meta.Leadfield*Kv-eye(meta.M))^2;
end

function kernel = RegionPrior_kernel( meta, par )
  LLinv = zeros(meta.K, meta.K);
  for k = 1:meta.K
    LLinv(k,k) = 1/meta.n(k);
  end
  key    = ( par.gamma1* meta.Leadfield * meta.Ls*LLinv*meta.Ls' + par.gamma0*meta.Leadfield ) * meta.Leadfield' ...
    + par.sigma* eye(meta.M);
  keyInv = linsolve( key, eye(meta.M) );
  kernel = (par.gamma0 * meta.Leadfield' + par.gamma1* meta.Ls*LLinv*meta.Ls' * meta.Leadfield') ...
    * keyInv;
end